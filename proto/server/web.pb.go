// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/web.proto

// Web exposes a backend server over gRPC.

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/johanbrandhorst/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PlayerID struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerID) Reset()         { *m = PlayerID{} }
func (m *PlayerID) String() string { return proto.CompactTextString(m) }
func (*PlayerID) ProtoMessage()    {}
func (*PlayerID) Descriptor() ([]byte, []int) {
	return fileDescriptor_62c4a9a417d5e65b, []int{0}
}

func (m *PlayerID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerID.Unmarshal(m, b)
}
func (m *PlayerID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerID.Marshal(b, m, deterministic)
}
func (m *PlayerID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerID.Merge(m, src)
}
func (m *PlayerID) XXX_Size() int {
	return xxx_messageInfo_PlayerID.Size(m)
}
func (m *PlayerID) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerID.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerID proto.InternalMessageInfo

func (m *PlayerID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_62c4a9a417d5e65b, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PlayerID)(nil), "web.PlayerID")
	proto.RegisterType((*Empty)(nil), "web.Empty")
}

func init() { proto.RegisterFile("proto/web.proto", fileDescriptor_62c4a9a417d5e65b) }

var fileDescriptor_62c4a9a417d5e65b = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8e, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x46, 0x69, 0x11, 0x94, 0x5a, 0x02, 0xa4, 0x4c, 0x28, 0x13, 0xca, 0xd4, 0x85, 0x58, 0x6a,
	0x17, 0x46, 0x54, 0x85, 0x21, 0x0b, 0x42, 0x8c, 0x6c, 0x3e, 0xf7, 0x88, 0xdd, 0xba, 0xb6, 0x75,
	0xb9, 0x60, 0xe5, 0xaf, 0x33, 0x21, 0x1c, 0x90, 0x58, 0xbb, 0xbd, 0x93, 0xbe, 0x77, 0x7a, 0xe2,
	0x36, 0x52, 0xe0, 0x20, 0x13, 0x42, 0x9d, 0xa9, 0x38, 0x4f, 0x08, 0xe5, 0x63, 0x67, 0xd9, 0x0c,
	0x50, 0xeb, 0x70, 0x94, 0xfb, 0x60, 0x94, 0x07, 0x52, 0x7e, 0x67, 0x02, 0xf5, 0x2c, 0xf3, 0x0c,
	0x86, 0x8f, 0x09, 0x64, 0x17, 0xa2, 0x41, 0xda, 0xf7, 0x93, 0x5e, 0x95, 0xe2, 0xea, 0xd5, 0xa9,
	0x11, 0xa9, 0x6d, 0x8a, 0x1b, 0x31, 0x6f, 0x9b, 0xbb, 0xd9, 0xfd, 0x6c, 0xb5, 0x7c, 0x9b, 0xb7,
	0x4d, 0xb5, 0x10, 0x17, 0xcf, 0xc7, 0xc8, 0xe3, 0x7a, 0x23, 0x16, 0x5b, 0xa5, 0x0f, 0xe8, 0x77,
	0xc5, 0x4a, 0x2c, 0x5f, 0x30, 0x4d, 0x4a, 0x21, 0xea, 0x9f, 0x8e, 0xbc, 0x29, 0xaf, 0x33, 0xff,
	0xfd, 0xaa, 0xce, 0xb6, 0xf6, 0xeb, 0x69, 0xfd, 0x2f, 0xeb, 0x30, 0x22, 0x32, 0xcb, 0x8e, 0xa2,
	0x4e, 0x08, 0x0f, 0x10, 0xac, 0x43, 0x8a, 0x4e, 0x31, 0xfe, 0x86, 0x69, 0x67, 0xd1, 0xf3, 0xfb,
	0x49, 0x4e, 0x8f, 0xf4, 0x89, 0x04, 0x97, 0xf9, 0xda, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff, 0x67,
	0x07, 0xf1, 0x99, 0x1d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendClient interface {
	NewPlayer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlayerID, error)
}

type backendClient struct {
	cc *grpc.ClientConn
}

func NewBackendClient(cc *grpc.ClientConn) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) NewPlayer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlayerID, error) {
	out := new(PlayerID)
	err := c.cc.Invoke(ctx, "/web.Backend/NewPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
type BackendServer interface {
	NewPlayer(context.Context, *Empty) (*PlayerID, error)
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

func _Backend_NewPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).NewPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Backend/NewPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).NewPlayer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "web.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewPlayer",
			Handler:    _Backend_NewPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/web.proto",
}
